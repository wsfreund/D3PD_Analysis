function [trainedNetwork, trainInfo] = trainMyNN(nn, sgn_cl_size, bkg_cl_size, sgn, bkg,...
    sgn_trn_clusters, sgn_val_clusters, sgn_tst_clusters,... 
    bkg_trn_clusters, bkg_val_clusters, bkg_tst_clusters,... 
    trainMethod,useFastNet)

  sgn_total_clusters = length([sgn_trn_clusters sgn_val_clusters sgn_tst_clusters]);
  bkg_total_clusters = length([bkg_trn_clusters bkg_val_clusters bkg_tst_clusters]);
  sgn_total_size = sgn_cl_size*(sgn_total_clusters);
  bkg_total_size = bkg_cl_size*(bkg_total_clusters);
  sgn_train_cluster = create_cluster(sgn_cl_size,sgn_trn_clusters);
  bkg_train_cluster = create_cluster(bkg_cl_size,bkg_trn_clusters);
	if(useFastNet)
		untrainedNetwork = newff2(...
			{sgn(:,create_cluster(sgn_cl_size,sgn_trn_clusters)), bkg(:,create_cluster(bkg_cl_size,bkg_trn_clusters))},...
			{ones(1,sgn_cl_size*length(sgn_trn_clusters)) , -ones(1,bkg_cl_size*length(bkg_trn_clusters))},[nn],...
			{'tansig' 'tansig'}, trainMethod);
		untrainedNetwork.trainParam.useSP = 1;
		untrainedNetwork.trainParam.batchSize = min([sgn_cl_size*length(sgn_trn_clusters) bkg_cl_size*length(bkg_trn_clusters)]);
	else
		untrainedNetwork = newff(...
		    [...
		      sgn(:,sgn_train_cluster)...
		      bkg(:,bkg_train_cluster)...
		    ],...
		    [...
		      ones(1,length(sgn_train_cluster)),...
		      -ones(1,length(bkg_train_cluster))...
		    ],...
		    [nn],{'tansig','tansig'},trainMethod,'learngd','mse',{'fixunknowns','removeconstantrows'},{'removeconstantrows'},'divideind'...
		  );
		untrainedNetwork.divideParam.trainInd = [create_cluster(sgn_cl_size,sgn_trn_clusters) [sgn_total_size+create_cluster(bkg_cl_size,bkg_trn_clusters)]];
		untrainedNetwork.divideParam.valInd = [create_cluster(sgn_cl_size,sgn_val_clusters) [sgn_total_size+create_cluster(bkg_cl_size,bkg_val_clusters)]];
		untrainedNetwork.divideParam.testInd = [create_cluster(sgn_cl_size,sgn_tst_clusters) [sgn_total_size+create_cluster(bkg_cl_size,bkg_tst_clusters)]];
	end
  untrainedNetwork.trainParam.epochs = 10000; 
  %untrainedNetwork.trainParam.epochs = 100; 
  untrainedNetwork.trainParam.max_fail = 50;
  untrainedNetwork.trainParam.show = 25;
  untrainedNetwork.trainParam.goal = 1E-9;                  % Desired goal
  untrainedNetwork.trainParam.lr = 0.1;                  % Training step (ALFA)
  untrainedNetwork.trainParam.mc = 0;                    % Moment (BETA)
  untrainedNetwork.trainParam.min_grad = 0;
  untrainedNetwork.trainParam.time = inf;
  untrainedNetwork.trainParam.showWindow = false;
  untrainedNetwork.trainParam.showCommandLine = true;

	if(useFastNet)
		[trainedNetwork, trainInfo] = ntrain(untrainedNetwork,...
			{sgn(:,create_cluster(sgn_cl_size,sgn_trn_clusters)), bkg(:,create_cluster(bkg_cl_size,bkg_trn_clusters))},...
			{sgn(:,create_cluster(sgn_cl_size,sgn_val_clusters)), bkg(:,create_cluster(bkg_cl_size,bkg_val_clusters))},...
			{sgn(:,create_cluster(sgn_cl_size,sgn_tst_clusters)), bkg(:,create_cluster(bkg_cl_size,bkg_tst_clusters))});
	else
		[tmp_trainedNetwork, trainInfo] = train(untrainedNetwork,...
			[...
				%sgn(:,1:10) ...
				%bkg(:,1:10) ...
				sgn(:,1:sgn_total_size),...
				bkg(:,1:bkg_total_size)
			],...
			[...
				%ones(1,10),...
				%-ones(1,10)...
				ones(1,sgn_total_size),...
				-ones(1,bkg_total_size)...
			]...
		);
		trainedNetwork = newff(...
		    [...
		      sgn(:,1)...
		      bkg(:,1)...
		      %sgn(:,1:10) ...
		      %bkg(:,1:10) ...
		    ],...
		    [...
		      ones(1,1),...
		      -ones(1,1)...
		      %ones(1,10),...
		      %-ones(1,10)...
		    ],...
		    [nn],{'tansig','tansig'},trainMethod,'learngd','mse',{'fixunknowns','removeconstantrows'},{'removeconstantrows'},'divideind'...
		  );
		trainedNetwork.LW = tmp_trainedNetwork.LW;
		trainedNetwork.IW = tmp_trainedNetwork.IW;
		trainedNetwork.b  = tmp_trainedNetwork.b;
		if(~useFastNet)
			trainInfo.trainParam.trainInd = [];
			trainInfo.trainParam.valInd = [];
			trainInfo.trainParam.testInd = [];
			trainInfo.trainParam.trainMask = {};
			trainInfo.trainParam.valMask = {};
			trainInfo.trainParam.testMask = {};
			trainInfo.trainParam.testMask = {};
		end
 	end

end
